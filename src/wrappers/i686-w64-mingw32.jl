# Autogenerated wrapper script for JpegTurbo_jll for i686-w64-mingw32
export cjpeg, djpeg, jpegtran, libjpeg, libturbojpeg

## Global variables
PATH = ""
LIBPATH = ""
LIBPATH_env = "PATH"
LIBPATH_default = ""

# Relative path to `cjpeg`
const cjpeg_splitpath = ["bin", "cjpeg.exe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
cjpeg_path = ""

# cjpeg-specific global declaration
function cjpeg(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ';', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ';', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(cjpeg_path)
    end
end


# Relative path to `djpeg`
const djpeg_splitpath = ["bin", "djpeg.exe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
djpeg_path = ""

# djpeg-specific global declaration
function djpeg(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ';', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ';', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(djpeg_path)
    end
end


# Relative path to `jpegtran`
const jpegtran_splitpath = ["bin", "jpegtran.exe"]

# This will be filled out by __init__() for all products, as it must be done at runtime
jpegtran_path = ""

# jpegtran-specific global declaration
function jpegtran(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(PATH, ';', ENV["PATH"])
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        LIBPATH_base = get(ENV, LIBPATH_env, expanduser(LIBPATH_default))
        if !isempty(LIBPATH_base)
            env_mapping[LIBPATH_env] = string(LIBPATH, ';', LIBPATH_base)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(jpegtran_path)
    end
end


# Relative path to `libjpeg`
const libjpeg_splitpath = ["bin", "libjpeg-62.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libjpeg_path = ""

# libjpeg-specific global declaration
# This will be filled out by __init__()
libjpeg_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libjpeg = "libjpeg-62.dll"


# Relative path to `libturbojpeg`
const libturbojpeg_splitpath = ["bin", "libturbojpeg.dll"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libturbojpeg_path = ""

# libturbojpeg-specific global declaration
# This will be filled out by __init__()
libturbojpeg_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libturbojpeg = "libturbojpeg.dll"


"""
Open all libraries
"""
function __init__()
    global artifact_dir = abspath(artifact"JpegTurbo")

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list
    global cjpeg_path = normpath(joinpath(artifact_dir, cjpeg_splitpath...))

    push!(PATH_list, dirname(cjpeg_path))
    global djpeg_path = normpath(joinpath(artifact_dir, djpeg_splitpath...))

    push!(PATH_list, dirname(djpeg_path))
    global jpegtran_path = normpath(joinpath(artifact_dir, jpegtran_splitpath...))

    push!(PATH_list, dirname(jpegtran_path))
    global libjpeg_path = normpath(joinpath(artifact_dir, libjpeg_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libjpeg_handle = dlopen(libjpeg_path)
    push!(LIBPATH_list, dirname(libjpeg_path))

    global libturbojpeg_path = normpath(joinpath(artifact_dir, libturbojpeg_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libturbojpeg_handle = dlopen(libturbojpeg_path)
    push!(LIBPATH_list, dirname(libturbojpeg_path))

    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ';')
    global LIBPATH = join(vcat(LIBPATH_list, [Sys.BINDIR, joinpath(Sys.BINDIR, Base.LIBDIR, "julia"), joinpath(Sys.BINDIR, Base.LIBDIR)]), ';')

    
end  # __init__()

